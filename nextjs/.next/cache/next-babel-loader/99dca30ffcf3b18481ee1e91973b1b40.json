{"ast":null,"code":"import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nconst client = new ApolloClient({\n  link: ApolloLink.from([onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    if (graphQLErrors) graphQLErrors.forEach(({\n      message,\n      locations,\n      path\n    }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n    if (networkError) console.log(`[Network error]: ${networkError}`);\n  }), new HttpLink({\n    uri: 'http://localhost:3000/graphql',\n    credentials: 'same-origin'\n  })]),\n  cache: new InMemoryCache()\n});\nexport default client;","map":{"version":3,"sources":["/Users/apple/dev/nestjsCRUD/nextjs/apollo.js"],"names":["ApolloClient","InMemoryCache","HttpLink","onError","ApolloLink","client","link","from","graphQLErrors","networkError","forEach","message","locations","path","console","log","uri","credentials","cache"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B;AAEA,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,IAAI,EAAEF,UAAU,CAACG,IAAX,CAAgB,CACpBJ,OAAO,CAAC,CAAC;AAAEK,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,GAAD,KAAqC;AAC3C,QAAID,aAAJ,EACEA,aAAa,CAACE,OAAd,CAAsB,CAAC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,SAAX;AAAsBC,MAAAA;AAAtB,KAAD,KACpBC,OAAO,CAACC,GAAR,CACG,6BAA4BJ,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EAD9E,CADF;AAKF,QAAIJ,YAAJ,EAAkBK,OAAO,CAACC,GAAR,CAAa,oBAAmBN,YAAa,EAA7C;AACnB,GARM,CADa,EAUpB,IAAIP,QAAJ,CAAa;AACXc,IAAAA,GAAG,EAAE,+BADM;AAEXC,IAAAA,WAAW,EAAE;AAFF,GAAb,CAVoB,CAAhB,CADwB;AAgB9BC,EAAAA,KAAK,EAAE,IAAIjB,aAAJ;AAhBuB,CAAjB,CAAf;AAmBA,eAAeI,MAAf","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors)\n        graphQLErrors.forEach(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n          ),\n        );\n      if (networkError) console.log(`[Network error]: ${networkError}`);\n    }),\n    new HttpLink({\n      uri: 'http://localhost:3000/graphql',\n      credentials: 'same-origin',\n    }),\n  ]),\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}